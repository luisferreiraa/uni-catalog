// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum PersonRole {
  AUTHOR
  TRANSLATOR
  COMPOSER
  INTERPRETER
  ILLUSTRATOR
  EDITOR
  OTHER
}

model CatalogRecord {
  id               String            @id @default(cuid())
  templateName     String
  templateDesc     String?
  recordTemplateId String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  fields           CatalogField[]
  textUnimarc      String?
  RecordPerson     RecordPerson[]
  RecordPublisher  RecordPublisher[]
}

model CatalogField {
  id            String        @id @default(cuid())
  tag           String
  value         String
  subfields     Json
  fieldType     FieldType
  fieldName     String?
  subfieldNames Json?
  isRepeatable  Boolean       @default(false)
  isMandatory   Boolean       @default(false)
  recordId      String
  record        CatalogRecord @relation(fields: [recordId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([recordId])
}

enum FieldType {
  CONTROL
  DATA
}

model Person {
  id           String         @id @default(cuid())
  name         String         @unique
  type         PersonRole
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RecordPerson RecordPerson[]
}

model Publisher {
  id              String            @id @default(cuid())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  RecordPublisher RecordPublisher[]
}

model RecordPerson {
  id        String     @id @default(cuid())
  recordId  String
  personId  String
  role      PersonRole
  createdAt DateTime   @default(now())

  record CatalogRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  person Person        @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([recordId, personId, role])
}

model RecordPublisher {
  id          String        @id @default(cuid())
  recordId    String
  publisherId String
  createdAt   DateTime      @default(now())
  record      CatalogRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  publisher   Publisher     @relation(fields: [publisherId], references: [id], onDelete: Cascade)

  @@unique([recordId, publisherId])
}
